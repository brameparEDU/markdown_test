{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"tema6/Scripting/","text":"Concepto de script Los scripts son guiones que contienen una serie de \u00f3rdenes y estructuras organizadas secuencialmente. Principalmente, presentan las siguientes caracter\u00edsticas: Se generan con gran facilidad y son bastantes funcionales. Se ejecutan de forma lineal-secuencial orden tras orden. Los lenguajes de scripts son interpretados, no compilados; lo que quiere decir que sus \u00f3rdenes secuenciales son interpretadas por un sistema o programa padre. Actualmente, son muy conocidos lenguajes-scripts como JavaScript, PHP, ASP, etc., para el desarrollo de webs. El concepto de los scripts en Linux, es bastante an\u00e1logo al de los ficheros por lotes (.bat) de MSDOS, siendo los scripts bastante m\u00e1s potentes por la cantidad de estructuras, bucles, y dem\u00e1s recursos que permiten utilizar. El Shell es la interfaz con la que el usuario-programador se comunica con el sistema operativo directamente. Principalmente, es el elemento encargado de las siguientes funciones: Interpretar comandos: Acepta comandos y los ejecuta; si se trata de comandos de los usuarios, como los scripts, los env\u00eda al Kernel para que sea este quien los ejecute y procese. Actuar como un int\u00e9rprete de programaci\u00f3n de un lenguaje de alto nivel. Existen distintos tipos de Shell, cada uno con una sintaxis diferente, pero con la misma filosof\u00eda: sh, csh, bash y tcsh. Pod\u00e9is encontrar m\u00e1s informaci\u00f3n sobre shells en este enlace Trabajo con scripts Tipos y ejecuci\u00f3n de scripts La primera tarea ser\u00e1 crear el script utilizando para ello cualquier editor que acompa\u00f1a a Linux: nano, gedit, vi, etc. Al inicio de cada script, se identifica el tipo de fichero. En el caso de scripts tenemos las siguientes opciones: Identificaci\u00f3n Descripci\u00f3n #!bin/bash script de bash #!bin/sh script de shell #!usr/bin/python script de python Para ejecutar el script, se presentan dos opciones: Asignarle el permiso de ejecuci\u00f3n al fichero y luego ejecutarlo $ chmod 777 miscript.sh $ ./miscript.sh Ejecutarlo con bash $ bash miscript.sh Variables Las variables de shell pueden servir tanto para controlar el entorno (variables de entorno), como para utilizarlas en scripts, Y pueden ser de dos tipos: Locales al shell actual (visibles con set) Globales a todos los shells (variables de entorno, visibles con env), Las variables empiezan por una letra o por _ , y generalmente se escriben en may\u00fasculas. Despu\u00e9s del primer car\u00e1cter, podemos poner letras, n\u00fameros o el car\u00e1cter _ . Las operaciones que podemos hacer con las variables son: Asignarles un valor: variable=valor Recuperar su valor: $variable o ${variable} Las llaves se utilizan para recuperar un valor en expresiones m\u00e1s largas: echo${var}hola Obtener la longitud en caracteres de una variable: echo ${#variable} Eliminar una variable: unset variable Definir una variable como solo lectura: readonly variable Variables de entorno Cada shell se ejecuta en un entorno de ejecuci\u00f3n determinado, que especifica determinados aspectos de funcionamiento mediante lo que se conoce como variables de entorno o variables globales. Veamos algunas de estas variables: Variable Descripci\u00f3n HOME Directorio del usuario MANPATH Ruta p\u00e1ginas del manual SHELL Shell por defecto PS1/PS2 Prompts primario y secundario USERNAME Nombre del usuario LANG Localizaci\u00f3n y codificaci\u00f3n PWD Directorio actual LC_* Aspectos de localizaci\u00f3n PATH Ruta de los ejecutables LANGUAGE Localizaci\u00f3n Para ver todas las variables de entorno, hacemos uso de la orden env . Adem\u00e1s, si queremos definir una nueva variable de entorno, podemos hacer uso de la orden export . Con esto, la variable exportada ser\u00e1 visible tanto en el shell actual como en los hijos Expansiones del Shell Expansiones de par\u00e1metros Cuando accedemos a una variable con el s\u00edmbolo $ , estamos haciendo uso de la expansi\u00f3n de par\u00e1metros, que no es m\u00e1s que la sustituci\u00f3n del nombre de la variable por su valor. Cuando utilizamos las llaves { } para la expansi\u00f3n, lo que hacemos es el nombre del par\u00e1metro (variable) o s\u00edmbolo que queremos expandir. Veamos un ejemplo: A=David echo \"Hola ${A}, bienvenido/a\" ??? note \"Nota\" Es posible que en muchas ocasiones se reconozca la variable usando solo $variable en lugar de ${variable} , pero es recomendable usar la expansi\u00f3n siempre con las llaves {} ::: Expansiones de \u00f3rdenes Con la expansi\u00f3n de \u00f3rdenes podemos reemplazar una orden por su salida. Para eso podemos hacer uso de las siguientes opciones $(orden) o `orden` Veamos un ejemplo sencillo con el comando date: $ date jueves, 14 de febrero de 2019, 11:34:07 CET $ echo date date $ echo `date` jueves, 14 de febrero de 2019, 11:35:10 CET $ echo $(date) jueves, 14 de febrero de 2019, 11:36:20 CET $ echo \"Hoy es `date +%A`\" Hoy es jueves Expansiones de llaves Con la expansi\u00f3n de llaves podemos generar cadenas de texto arbitrarias, mediante la combinaci\u00f3n de los elementos que coloquemos dentro de las llaves. $ echo a{d,c,b}e ade ace abe $ echo \\/usr\\/share{\\/icons,\\/applications} /usr/share/icons /usr/share/applications Fijaos que escapamos la / con el car\u00e1cter \\ . Expansi\u00f3n aritm\u00e9tica Con la expansi\u00f3n aritm\u00e9tica substituimos una expresi\u00f3n aritm\u00e9tica por su resultado. Para utilizarla podemos utilizar las siguientes sintaxis: - $((expresi\u00f3n)) - $[expresi\u00f3n] - let var=expresi\u00f3n Veamos algunos ejemplos: $ echo $((7*3/2)) 10 $ echo $[3*2+5] 11 $ let n=5+10 $ echo $n 15 Paso de par\u00e1metros a un Script Para pasar par\u00e1metros a un script, los a\u00f1adimos despu\u00e9s del nombre del script. $ ./miscript.sh arg1 arg2 arg3 ... argN Dentro del script haremos referencia a los argumentos a trav\u00e9s de las siguientes variables: $0 El nombre del script $1 a $9 Argumentos del 1 al 9 ${10}, ${11} Argumentos a partir del 10 $# N\u00famero de argumentos $* o $@ Todos los argumentos Vamos a verlo con un ejemplo: #!/bin/bash SUMA=$((${1:-0} + ${2:-0} + ${3:-0})) echo $SUMA Ejecuci\u00f3n: $ bash ./s2.sh 1 2 3 6 Tratamiento de la entrada y la salida La lectura se puede realizar mediante dos mecanismos: A trav\u00e9s de la entrada est\u00e1ndar (stdin) con el comando read #!/bin/bash echo -n \"Escribe el DNI y letra separados por un espacio\" read DNI LETRA Nota La opci\u00f3n -n evita el salto de l\u00ednea final Con la redirecci\u00f3n de entrada de un fichero read X < fichero Con esto, guardamos en la variable X el contenido de la primera l\u00ednea del fichero. Resultado de la ejecuci\u00f3n de una orden o Script Las \u00f3rdenes ejecutadas en un shell tienen un c\u00f3digo de salida que se guarda en la variable $? Si el c\u00f3digo de salida ( $? ) es 0, indica que la orden se ha ejecutado correctamente. Si el c\u00f3digo de salida ( $? ) es mayor que 0, indica que la orden no se ha ejecutado correctamente. Con la orden exit , podemos finalizar un script e indicar el c\u00f3digo de salida (como argumento num\u00e9rico) que deseemos, en funci\u00f3n de la ejecuci\u00f3n de \u00e9ste. Si en un script no utilizamos exit , el resultado del script ser\u00e1 el de la \u00faltima orden ejecutada. Veamos un ejemplo: $ echo $((3+5)) 8 $ echo $? 0 $ echo $((3/0)) bash: 3/0: division by 0 (error token is \"0\") $ echo $? 1 Estructuras de control de flujo Estructura condicional if simple if condicion then cumple_condicion fi Aliniaci\u00f3 Cap\u00e7alera Aliniaci\u00f3 Aliniaci\u00f3 a l'esquerra centrada a la dreta per defecte Fila1 Fila 1 Fila 1 Fila 1 Columna1 Columna2 Columna 3 Columna 3 Fila2 Fila 2 Fila 2 Fila 2 Columna1 Columna2 Columna 3 Columna 3","title":"Documentaci\u00f3n"},{"location":"tema6/Scripting/#concepto-de-script","text":"Los scripts son guiones que contienen una serie de \u00f3rdenes y estructuras organizadas secuencialmente. Principalmente, presentan las siguientes caracter\u00edsticas: Se generan con gran facilidad y son bastantes funcionales. Se ejecutan de forma lineal-secuencial orden tras orden. Los lenguajes de scripts son interpretados, no compilados; lo que quiere decir que sus \u00f3rdenes secuenciales son interpretadas por un sistema o programa padre. Actualmente, son muy conocidos lenguajes-scripts como JavaScript, PHP, ASP, etc., para el desarrollo de webs. El concepto de los scripts en Linux, es bastante an\u00e1logo al de los ficheros por lotes (.bat) de MSDOS, siendo los scripts bastante m\u00e1s potentes por la cantidad de estructuras, bucles, y dem\u00e1s recursos que permiten utilizar. El Shell es la interfaz con la que el usuario-programador se comunica con el sistema operativo directamente. Principalmente, es el elemento encargado de las siguientes funciones: Interpretar comandos: Acepta comandos y los ejecuta; si se trata de comandos de los usuarios, como los scripts, los env\u00eda al Kernel para que sea este quien los ejecute y procese. Actuar como un int\u00e9rprete de programaci\u00f3n de un lenguaje de alto nivel. Existen distintos tipos de Shell, cada uno con una sintaxis diferente, pero con la misma filosof\u00eda: sh, csh, bash y tcsh. Pod\u00e9is encontrar m\u00e1s informaci\u00f3n sobre shells en este enlace","title":"Concepto de script"},{"location":"tema6/Scripting/#trabajo-con-scripts","text":"","title":"Trabajo con scripts"},{"location":"tema6/Scripting/#tipos-y-ejecucion-de-scripts","text":"La primera tarea ser\u00e1 crear el script utilizando para ello cualquier editor que acompa\u00f1a a Linux: nano, gedit, vi, etc. Al inicio de cada script, se identifica el tipo de fichero. En el caso de scripts tenemos las siguientes opciones: Identificaci\u00f3n Descripci\u00f3n #!bin/bash script de bash #!bin/sh script de shell #!usr/bin/python script de python Para ejecutar el script, se presentan dos opciones: Asignarle el permiso de ejecuci\u00f3n al fichero y luego ejecutarlo $ chmod 777 miscript.sh $ ./miscript.sh Ejecutarlo con bash $ bash miscript.sh","title":"Tipos y ejecuci\u00f3n de scripts"},{"location":"tema6/Scripting/#variables","text":"Las variables de shell pueden servir tanto para controlar el entorno (variables de entorno), como para utilizarlas en scripts, Y pueden ser de dos tipos: Locales al shell actual (visibles con set) Globales a todos los shells (variables de entorno, visibles con env), Las variables empiezan por una letra o por _ , y generalmente se escriben en may\u00fasculas. Despu\u00e9s del primer car\u00e1cter, podemos poner letras, n\u00fameros o el car\u00e1cter _ . Las operaciones que podemos hacer con las variables son: Asignarles un valor: variable=valor Recuperar su valor: $variable o ${variable} Las llaves se utilizan para recuperar un valor en expresiones m\u00e1s largas: echo${var}hola Obtener la longitud en caracteres de una variable: echo ${#variable} Eliminar una variable: unset variable Definir una variable como solo lectura: readonly variable","title":"Variables"},{"location":"tema6/Scripting/#variables-de-entorno","text":"Cada shell se ejecuta en un entorno de ejecuci\u00f3n determinado, que especifica determinados aspectos de funcionamiento mediante lo que se conoce como variables de entorno o variables globales. Veamos algunas de estas variables: Variable Descripci\u00f3n HOME Directorio del usuario MANPATH Ruta p\u00e1ginas del manual SHELL Shell por defecto PS1/PS2 Prompts primario y secundario USERNAME Nombre del usuario LANG Localizaci\u00f3n y codificaci\u00f3n PWD Directorio actual LC_* Aspectos de localizaci\u00f3n PATH Ruta de los ejecutables LANGUAGE Localizaci\u00f3n Para ver todas las variables de entorno, hacemos uso de la orden env . Adem\u00e1s, si queremos definir una nueva variable de entorno, podemos hacer uso de la orden export . Con esto, la variable exportada ser\u00e1 visible tanto en el shell actual como en los hijos","title":"Variables de entorno"},{"location":"tema6/Scripting/#expansiones-del-shell","text":"","title":"Expansiones del Shell"},{"location":"tema6/Scripting/#expansiones-de-parametros","text":"Cuando accedemos a una variable con el s\u00edmbolo $ , estamos haciendo uso de la expansi\u00f3n de par\u00e1metros, que no es m\u00e1s que la sustituci\u00f3n del nombre de la variable por su valor. Cuando utilizamos las llaves { } para la expansi\u00f3n, lo que hacemos es el nombre del par\u00e1metro (variable) o s\u00edmbolo que queremos expandir. Veamos un ejemplo: A=David echo \"Hola ${A}, bienvenido/a\" ??? note \"Nota\" Es posible que en muchas ocasiones se reconozca la variable usando solo $variable en lugar de ${variable} , pero es recomendable usar la expansi\u00f3n siempre con las llaves {} :::","title":"Expansiones de par\u00e1metros"},{"location":"tema6/Scripting/#expansiones-de-ordenes","text":"Con la expansi\u00f3n de \u00f3rdenes podemos reemplazar una orden por su salida. Para eso podemos hacer uso de las siguientes opciones $(orden) o `orden` Veamos un ejemplo sencillo con el comando date: $ date jueves, 14 de febrero de 2019, 11:34:07 CET $ echo date date $ echo `date` jueves, 14 de febrero de 2019, 11:35:10 CET $ echo $(date) jueves, 14 de febrero de 2019, 11:36:20 CET $ echo \"Hoy es `date +%A`\" Hoy es jueves","title":"Expansiones de \u00f3rdenes"},{"location":"tema6/Scripting/#expansiones-de-llaves","text":"Con la expansi\u00f3n de llaves podemos generar cadenas de texto arbitrarias, mediante la combinaci\u00f3n de los elementos que coloquemos dentro de las llaves. $ echo a{d,c,b}e ade ace abe $ echo \\/usr\\/share{\\/icons,\\/applications} /usr/share/icons /usr/share/applications Fijaos que escapamos la / con el car\u00e1cter \\ .","title":"Expansiones de llaves"},{"location":"tema6/Scripting/#expansion-aritmetica","text":"Con la expansi\u00f3n aritm\u00e9tica substituimos una expresi\u00f3n aritm\u00e9tica por su resultado. Para utilizarla podemos utilizar las siguientes sintaxis: - $((expresi\u00f3n)) - $[expresi\u00f3n] - let var=expresi\u00f3n Veamos algunos ejemplos: $ echo $((7*3/2)) 10 $ echo $[3*2+5] 11 $ let n=5+10 $ echo $n 15","title":"Expansi\u00f3n aritm\u00e9tica"},{"location":"tema6/Scripting/#paso-de-parametros-a-un-script","text":"Para pasar par\u00e1metros a un script, los a\u00f1adimos despu\u00e9s del nombre del script. $ ./miscript.sh arg1 arg2 arg3 ... argN Dentro del script haremos referencia a los argumentos a trav\u00e9s de las siguientes variables: $0 El nombre del script $1 a $9 Argumentos del 1 al 9 ${10}, ${11} Argumentos a partir del 10 $# N\u00famero de argumentos $* o $@ Todos los argumentos Vamos a verlo con un ejemplo: #!/bin/bash SUMA=$((${1:-0} + ${2:-0} + ${3:-0})) echo $SUMA Ejecuci\u00f3n: $ bash ./s2.sh 1 2 3 6","title":"Paso de par\u00e1metros a un Script"},{"location":"tema6/Scripting/#tratamiento-de-la-entrada-y-la-salida","text":"La lectura se puede realizar mediante dos mecanismos: A trav\u00e9s de la entrada est\u00e1ndar (stdin) con el comando read #!/bin/bash echo -n \"Escribe el DNI y letra separados por un espacio\" read DNI LETRA Nota La opci\u00f3n -n evita el salto de l\u00ednea final Con la redirecci\u00f3n de entrada de un fichero read X < fichero Con esto, guardamos en la variable X el contenido de la primera l\u00ednea del fichero.","title":"Tratamiento de la entrada y la salida"},{"location":"tema6/Scripting/#resultado-de-la-ejecucion-de-una-orden-o-script","text":"Las \u00f3rdenes ejecutadas en un shell tienen un c\u00f3digo de salida que se guarda en la variable $? Si el c\u00f3digo de salida ( $? ) es 0, indica que la orden se ha ejecutado correctamente. Si el c\u00f3digo de salida ( $? ) es mayor que 0, indica que la orden no se ha ejecutado correctamente. Con la orden exit , podemos finalizar un script e indicar el c\u00f3digo de salida (como argumento num\u00e9rico) que deseemos, en funci\u00f3n de la ejecuci\u00f3n de \u00e9ste. Si en un script no utilizamos exit , el resultado del script ser\u00e1 el de la \u00faltima orden ejecutada. Veamos un ejemplo: $ echo $((3+5)) 8 $ echo $? 0 $ echo $((3/0)) bash: 3/0: division by 0 (error token is \"0\") $ echo $? 1","title":"Resultado de la ejecuci\u00f3n de una orden o Script"},{"location":"tema6/Scripting/#estructuras-de-control-de-flujo","text":"","title":"Estructuras de control de flujo"},{"location":"tema6/Scripting/#estructura-condicional","text":"if simple if condicion then cumple_condicion fi Aliniaci\u00f3 Cap\u00e7alera Aliniaci\u00f3 Aliniaci\u00f3 a l'esquerra centrada a la dreta per defecte Fila1 Fila 1 Fila 1 Fila 1 Columna1 Columna2 Columna 3 Columna 3 Fila2 Fila 2 Fila 2 Fila 2 Columna1 Columna2 Columna 3 Columna 3","title":"Estructura condicional"},{"location":"tema6/presentacio/","text":"\u00bfQu\u00e9 es Windows 11? Windows 11 es la \u00faltima versi\u00f3n del sistema operativo desarrollado por Microsoft, lanzado en 2021 como sucesor de Windows 10. Ofrece una serie de nuevas caracter\u00edsticas y mejoras en comparaci\u00f3n con versiones anteriores. Caracter\u00edsticas principales Nuevo dise\u00f1o : Windows 11 presenta un dise\u00f1o moderno y simplificado, con esquinas redondeadas y una barra de tareas centrada. Menor consumo de recursos : Se han realizado optimizaciones para mejorar el rendimiento y reducir el consumo de recursos del sistema. Compatibilidad con aplicaciones de Android : Windows 11 ofrece soporte para ejecutar aplicaciones de Android a trav\u00e9s de la Microsoft Store. Mejoras en la productividad : Se han introducido nuevas funciones para mejorar la productividad, como escritorios virtuales mejorados y una experiencia de juego mejorada. Requisitos del sistema Para ejecutar Windows 11, se requieren ciertos requisitos del sistema, que incluyen: Procesador de 64 bits con al menos 1 GHz de velocidad de reloj. 4 GB de RAM o m\u00e1s. Al menos 64 GB de almacenamiento disponible. Tarjeta gr\u00e1fica compatible con DirectX 12 o posterior. Pantalla con resoluci\u00f3n de al menos 720p. TPM (M\u00f3dulo de plataforma segura) versi\u00f3n 2.0. UEFI compatible con Secure Boot. Conexi\u00f3n a internet y cuenta de Microsoft para algunas caracter\u00edsticas. Interfaz de Usuario La interfaz de usuario de Windows 11 ha sido completamente redise\u00f1ada para ofrecer una experiencia m\u00e1s moderna y fluida. Las esquinas redondeadas, la barra de tareas centrada y el nuevo men\u00fa de inicio son algunas de las caracter\u00edsticas m\u00e1s destacadas de su nuevo aspecto. Evoluci\u00f3n de Windows img[alt~=\"center\"] { display: block; margin: 0 auto; } Windows ha experimentado una evoluci\u00f3n significativa a lo largo de los a\u00f1os, desde sus primeras versiones hasta llegar a Windows 11. Cada versi\u00f3n ha introducido nuevas caracter\u00edsticas, mejoras de rendimiento y cambios en la interfaz de usuario para adaptarse a las necesidades cambiantes de los usuarios y las tecnolog\u00edas emergentes. Cuenta de Microsoft Una cuenta de Microsoft es necesaria para acceder a muchas de las caracter\u00edsticas y servicios ofrecidos por Windows 11. Esta cuenta permite la sincronizaci\u00f3n de datos entre dispositivos, acceso a la tienda de aplicaciones de Microsoft y la activaci\u00f3n de funciones como el inicio de sesi\u00f3n \u00fanico y la autenticaci\u00f3n multifactor. Hyper-V img[alt~=\"center\"] { display: block; margin: 0 auto; } Hyper-V es una caracter\u00edstica de Windows 11 que permite la virtualizaci\u00f3n de sistemas operativos. Con Hyper-V, los usuarios pueden crear y ejecutar m\u00e1quinas virtuales en sus dispositivos Windows 11, lo que les permite probar software, configuraciones de red y realizar otras tareas de virtualizaci\u00f3n sin necesidad de hardware adicional. Conclusiones Windows 11 representa una evoluci\u00f3n significativa en el ecosistema de sistemas operativos de Microsoft. Con su dise\u00f1o moderno, mejoras de rendimiento y nuevas caracter\u00edsticas, ofrece una experiencia mejorada para los usuarios. \u00a1Gracias!","title":"Presentaci\u00f3n"},{"location":"tema6/presentacio/#_1","text":"","title":""},{"location":"tema6/presentacio/#que-es-windows-11","text":"Windows 11 es la \u00faltima versi\u00f3n del sistema operativo desarrollado por Microsoft, lanzado en 2021 como sucesor de Windows 10. Ofrece una serie de nuevas caracter\u00edsticas y mejoras en comparaci\u00f3n con versiones anteriores.","title":"\u00bfQu\u00e9 es Windows 11?"},{"location":"tema6/presentacio/#caracteristicas-principales","text":"Nuevo dise\u00f1o : Windows 11 presenta un dise\u00f1o moderno y simplificado, con esquinas redondeadas y una barra de tareas centrada. Menor consumo de recursos : Se han realizado optimizaciones para mejorar el rendimiento y reducir el consumo de recursos del sistema. Compatibilidad con aplicaciones de Android : Windows 11 ofrece soporte para ejecutar aplicaciones de Android a trav\u00e9s de la Microsoft Store. Mejoras en la productividad : Se han introducido nuevas funciones para mejorar la productividad, como escritorios virtuales mejorados y una experiencia de juego mejorada.","title":"Caracter\u00edsticas principales"},{"location":"tema6/presentacio/#requisitos-del-sistema","text":"Para ejecutar Windows 11, se requieren ciertos requisitos del sistema, que incluyen: Procesador de 64 bits con al menos 1 GHz de velocidad de reloj. 4 GB de RAM o m\u00e1s. Al menos 64 GB de almacenamiento disponible. Tarjeta gr\u00e1fica compatible con DirectX 12 o posterior. Pantalla con resoluci\u00f3n de al menos 720p. TPM (M\u00f3dulo de plataforma segura) versi\u00f3n 2.0. UEFI compatible con Secure Boot. Conexi\u00f3n a internet y cuenta de Microsoft para algunas caracter\u00edsticas.","title":"Requisitos del sistema"},{"location":"tema6/presentacio/#interfaz-de-usuario","text":"La interfaz de usuario de Windows 11 ha sido completamente redise\u00f1ada para ofrecer una experiencia m\u00e1s moderna y fluida. Las esquinas redondeadas, la barra de tareas centrada y el nuevo men\u00fa de inicio son algunas de las caracter\u00edsticas m\u00e1s destacadas de su nuevo aspecto.","title":"Interfaz de Usuario"},{"location":"tema6/presentacio/#evolucion-de-windows","text":"img[alt~=\"center\"] { display: block; margin: 0 auto; } Windows ha experimentado una evoluci\u00f3n significativa a lo largo de los a\u00f1os, desde sus primeras versiones hasta llegar a Windows 11. Cada versi\u00f3n ha introducido nuevas caracter\u00edsticas, mejoras de rendimiento y cambios en la interfaz de usuario para adaptarse a las necesidades cambiantes de los usuarios y las tecnolog\u00edas emergentes.","title":"Evoluci\u00f3n de Windows"},{"location":"tema6/presentacio/#cuenta-de-microsoft","text":"Una cuenta de Microsoft es necesaria para acceder a muchas de las caracter\u00edsticas y servicios ofrecidos por Windows 11. Esta cuenta permite la sincronizaci\u00f3n de datos entre dispositivos, acceso a la tienda de aplicaciones de Microsoft y la activaci\u00f3n de funciones como el inicio de sesi\u00f3n \u00fanico y la autenticaci\u00f3n multifactor.","title":"Cuenta de Microsoft"},{"location":"tema6/presentacio/#hyper-v","text":"img[alt~=\"center\"] { display: block; margin: 0 auto; } Hyper-V es una caracter\u00edstica de Windows 11 que permite la virtualizaci\u00f3n de sistemas operativos. Con Hyper-V, los usuarios pueden crear y ejecutar m\u00e1quinas virtuales en sus dispositivos Windows 11, lo que les permite probar software, configuraciones de red y realizar otras tareas de virtualizaci\u00f3n sin necesidad de hardware adicional.","title":"Hyper-V"},{"location":"tema6/presentacio/#conclusiones","text":"Windows 11 representa una evoluci\u00f3n significativa en el ecosistema de sistemas operativos de Microsoft. Con su dise\u00f1o moderno, mejoras de rendimiento y nuevas caracter\u00edsticas, ofrece una experiencia mejorada para los usuarios. \u00a1Gracias!","title":"Conclusiones"}]}